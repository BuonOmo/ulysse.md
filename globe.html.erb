---
---

<!DOCTYPE html>
<html>

<head>
	{% include meta.html %}
	<meta charset="utf-8">
	<title>Globe</title>
	<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
	<link rel="stylesheet" href="/css/main.css" type="text/css" />
	<link rel="stylesheet" href="/css/syntax.css" type="text/css" />
	<link href="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.css" rel="stylesheet">
	<script src="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.js"></script>
	<style>
		body {
			margin: 0;
			padding: 0;
		}

		#grid {
			display: grid;
			grid-template-columns: 1fr minmax(100px, 1fr);
			height: 100vh;
		}

		#breves {
			overflow: scroll;
			padding: 1rem;
			padding-bottom: 40vh;
		}

		#breves h1 {
			font-style: italic;
		}

		#breves h2 {
			font-style: italic;
			cursor: pointer;
			margin-bottom: 0;
		}

	</style>
</head>

<body>
	<div id="grid">
		<div id="map"></div>
		<div id="breves">
			<h1>Breves de voyage</h1>
			<% breves.each do |breve| %>
				<div data-date="<%= breve.date %>" data-loc="<%= breve.loc %>">
					<h2><%= breve.title %></h2>
					<sub class="ðŸ“†"><%= breve.display_date %></sub>
					<%= breve.content %>
				</div>
			<% end %>
		</div>
	</div>
	{% include footer.html %}
	<script>
		const tok = btoa('cGsuZXlKMUlqb2lhUzFyYVd4c0xYbHZkU0lzSW1FaU9pSmpiRGxyY1hVd1ptZ3dhV2sxTTI1d2JHOWxiSE5wYURnMUluMC5GZDlyM0FmR0hTcTNscWFubGJXUjNB')

		function rand(min, max = null) {
			if (max === null) {
				max = min
				min = 0
			}
			return Math.floor(Math.random() * (max - min + 1) + min)
		}

		function debounce(func, timeout = 300) {
			let timer
			return (...args) => {
				clearTimeout(timer)
				timer = setTimeout(() => { func.apply(this, args) }, timeout)
			}
		}

		function throttle(func, timeout = 300) {
			let throttling = false
			return (...args) => {
				if (throttling) return

				throttling = true
				func.apply(this, args)
				setTimeout(() => { throttling = false }, timeout)
			}
		}

		const zoom = 7
		const breves = Array.from(document.getElementById("breves").children).slice(1).map(el => ({ el, date: el.dataset.date, loc: el.dataset.loc.split(',').map(e => +e), layer: null }))
		const findBreve = () => {
			const offset = window.screen.height / 16 /* Pixel offset from top */
			let closest = null
			let min = 10000
			for (let breve of breves) {
				let curr = Math.abs(breve.el.getBoundingClientRect().top - offset)
				if (curr < min) {
					closest = breve
					min = curr
				}
			}
			return closest
		}

		mapboxgl.accessToken = tok
		const map = new mapboxgl.Map({
			container: 'map',
			style: 'mapbox://styles/mapbox/light-v10', /* Or outdoor v11 for more peps */
			center: findBreve().loc,
			zoom,
			minZoom: 2,
			maxBounds: [[-100.0, -60.0], [9.0, 60.0]],
			projection: 'naturalEarth' // starting projection
		})

		const flyToBreve = (map, breve) => {
			map.flyTo({
				center: breve.loc,
				zoom,
				essential: true // this animation is considered essential with respect to prefers-reduced-motion
			})
		}

		map.on('load', () => {
			map.addLayer({
				'id': 'route',
				'type': 'line',
				'source': {
					'type': 'geojson',
					'data': {
						'type': 'Feature',
						'properties': {},
						'geometry': {
							'type': 'LineString',
							'coordinates': breves.map(({ loc }) => loc)
						}
					}
				},
				'layout': { 'line-cap': 'round' },
				'paint': {
					'line-color': '#282c34',
					'line-width': 1
				}
			})

			breves.map((breve, i) => {
				const id = `pt${i}`
				breve.layer = id
				map.addSource(id, {
					'type': 'geojson',
					'data': {
						'type': 'Point',
						'coordinates': breve.loc
					}
				})
				map.addLayer({
					'id': id,
					'type': 'circle',
					'source': id,
					'paint': {
						'circle-radius': 4,
						'circle-color': '#ddd',
						'circle-stroke-width': 1,
						'circle-stroke-color': '#282c34'
					}
				})
				map.on('click', id, () => {
					flyToBreve(map, breve)
					breve.el.scrollIntoView({ behavior: 'smooth' })
				})
				breve.el.addEventListener('click', () => {
					flyToBreve(map, breve)
				})
				map.on('mouseenter', id, () => {
					map.getCanvas().style.cursor = 'pointer'
				})

				// Change it back to a pointer when it leaves.
				map.on('mouseleave', id, () => {
					map.getCanvas().style.cursor = ''
				})
			})
		})

		// Fly to breve that is closer in view
		document.getElementById('breves').addEventListener('scroll', throttle((e) => {
			console.log('scrolled')
			const breve = findBreve()
			flyToBreve(map, breve)
		}, 40))
	</script>

</body>

</html>
